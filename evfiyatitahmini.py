# -*- coding: utf-8 -*-
"""EvFiyatiTahmini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yvu9t1CVORLJO0wfNyGcql8mSyb0MgOR

### Preprocessing
"""

import numpy as np
import pandas as pandas
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.linear_model import Ridge
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import fetch_california_housing

california = fetch_california_housing()

X = california.data
y = california.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

"""#### Scaler"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""#### Linear Model"""

lin_reg = LinearRegression()
lin_reg.fit(X_train_scaled, y_train)

y_pred_lin = lin_reg.predict(X_test_scaled) #prediction

y_pred_lin

y_test

mse_lin = mean_squared_error(y_test, y_pred_lin)
r2_lin = r2_score(y_test, y_pred_lin)

print(f"Linear Regression MSE: {mse_lin}")
print(f"Linear Regression R2: {r2_lin}")

np.sqrt(0.5558915986952442)

""" #### Ridge L2 regression"""

ridge_params = {"alpha": [0.1, 1, 10, 100]}
ridge = Ridge()
ridge_grid = GridSearchCV(ridge, ridge_params, cv=5)
ridge_grid.fit(X_train_scaled, y_train)

y_pred_ridge = ridge_grid.predict(X_test_scaled)

mse_ridge = mean_squared_error(y_test, y_pred_ridge)
r2_ridge = r2_score(y_test, y_pred_ridge)

print(f"Ridge Regression MSE: {mse_ridge}")
print(f"Ridge Regression R2: {r2_ridge}")

print(f"Ridge Regression Best Alpha: {ridge_grid.best_params_}")

"""#### Lasso L1 Regression"""

lasso_params = {"alpha": [0.1, 1, 10, 100]}
lasso = Lasso(max_iter=10000)
lasso_grid = GridSearchCV(lasso, lasso_params, cv=5)
lasso_grid.fit(X_train_scaled, y_train)
lasso_grid.fit(X_train_scaled, y_train)

y_pred_lasso = lasso_grid.predict(X_test_scaled)

mse_lasso = mean_squared_error(y_test, y_pred_lasso)
r2_lasso = r2_score(y_test, y_pred_lasso)

print(f"Lasso Regression MSE: {mse_lasso}")
print(f"Lasso Regression R2: {r2_lasso}")
print(f"Lasso Regression Best Alpha: {lasso_grid.best_params_}")

"""#### ElasticNet Training and hyperparameter tuning"""

elastic_params = {"alpha": [0.1, 1, 10], "l1_ratio" : [0.2, 0.5, 0.8]}
elastic = ElasticNet(max_iter=10000)
elastic_grid = GridSearchCV(elastic, elastic_params, cv=5)
elastic_grid.fit(X_train_scaled, y_train)

y_pred_elastic = elastic_grid.predict(X_test_scaled)

mse_elastic = mean_squared_error(y_test, y_pred_elastic)
r2_elastic = r2_score(y_test, y_pred_elastic)

print(f"ElasticNet Regression MSE: {mse_elastic}")
print(f"ElasticNet Regression R2: {r2_elastic}")

print(f"ElasticNet regression best params : {elastic_grid.best_params_}")

"""### Model Comparision"""

models = ["Linear Regression", "Ridge Regression", "Lasso Regression", "ElasticNet Regression"]
mses = [mse_lin, mse_ridge, mse_lasso, mse_elastic]
r2s = [r2_lin, r2_ridge, r2_lasso, r2_elastic]

plt.figure(figsize=(12,6))

#mse plot
plt.subplot(1,2,1)
plt.barh(models, mses, color="skyblue")
plt.xlabel("Mean Square Error")
plt.ylabel("MSE")
plt.title("Model MSE Comparison")


#r2 plot
plt.subplot(1,2,2)
plt.barh(models, r2s, color="lightgreen")
plt.xlabel("R2 Score")
plt.ylabel("R2")
plt.title("Model R2 Score Comparison")

plt.tight_layout()
plt.show()